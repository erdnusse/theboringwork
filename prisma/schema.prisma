// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id        String   @id
  email     String   @unique
  name      String?
  image     String?
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  inquiries  Inquiry[]
}


// Inquiry model
model Inquiry {
  id        String   @id @default(cuid())
  name      String
  email     String
  phone     String?
  message   String
  status    InquiryStatus @default(NEW)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId     String?
  user       User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
}

// Contact Message model
model ContactMessage {
  id        String          @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String
  status    ContactStatus   @default(NEW)
  notes     String?         // Admin notes about the contact
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  @@index([email])
  @@index([status])
  @@index([createdAt])
}

// Email OAuth Configuration
model EmailOAuthConfig {
  id           String   @id @default(cuid())
  email        String
  clientId     String
  clientSecret String
  refreshToken String
  accessToken  String?
  tokenExpiry  BigInt?
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([email, isActive])
}

// OAuth State for security
model OAuthState {
  id           Int      @id @default(1) // Fixed ID of 1
  state        String   // State is now a regular field, not an ID
  email        String
  clientId     String
  clientSecret String
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([state]) // Add index on state for faster lookups
}

// Email Log
model EmailLog {
  id        String      @id @default(cuid())
  to        String
  subject   String
  content   String
  status    EmailStatus @default(PENDING)
  error     String?
  sentAt    DateTime?
  createdAt DateTime    @default(now())
}

// Enums
enum Role {
  USER
  AGENT
  ADMIN
}

enum PropertyStatus {
  ACTIVE
  PENDING
  SOLD
  RENTED
}

enum InquiryStatus {
  NEW
  CONTACTED
  VIEWING_SCHEDULED
  CLOSED
}

enum EmailStatus {
  PENDING
  SENT
  FAILED
}

enum ContactStatus {
  NEW
  READ
  REPLIED
  SPAM
  ARCHIVED
}
